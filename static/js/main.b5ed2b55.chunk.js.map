{"version":3,"sources":["Components/SentenceSRT2WordSRT.js","Components/SentenceCSV2DataFiles.js","Components/I18nJSON2CSV.js","Components/ConsolidatedCSV2I18nJSONFiles.js","App.js","serviceWorker.js","index.js"],"names":["SentenceSRT2WordSRT","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","parseWord","word","replace","handleDroppedFile","file","value","result","setState","readFile","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","Promise","resolve","reader","FileReader","onloadend","readAsText","abrupt","sent","stop","_x","apply","arguments","sentence2wordSRT","parsedSRT","start","text","split","map","filter","_","i","end","getFileName","outFilePathComponent","path","pop","join","convert","_ref2","_callee2","_ref3","content","parsed","wordsSRT","outputData","blob","fn","specialWords","_context2","parseSRT","concat","toConsumableArray","stringifySRT","Blob","type","saveAs","forEach","wordCount","length","_x2","onDrop","_ref4","_callee3","acceptedFiles","_context3","_x3","state","onTextAreaChange","bind","assertThisInitialized","event","_this2","target","react_default","createElement","es","_ref5","getRootProps","getInputProps","assign","style","border","maxWidth","color","margin","Component","SentenceCSV2DataFiles","files","zip","data","sentenceTimeRanges","curIndex","curSentence","invalidRecords","outboundRecords","tunedRecords","turned","csv","JSZip","Csv","fromString","start_ms","end_ms","en","parseInt","srt","console","log","JSON","stringify","objectSpread","indexOf","nextSentence","push","_curSentence","returnSrt","from","to","substring","generateAsync","find","f","endsWith","alert","I18nJSON2CSV","parse","keys","RegExp","ConsolidatedCSV2I18nJSONFiles","_data$","fields","id","objectWithoutProperties","lang","i18nJSON","App","className","SentenceSRT2WordSRT_SentenceSRT2WordSRT","SentenceCSV2DataFiles_SentenceCSV2DataFiles","I18nJSON2CSV_I18nJSON2CSV","ConsolidatedCSV2I18nJSONFiles_ConsolidatedCSV2I18nJSONFiles","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b5ed2b55.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Dropzone from 'react-dropzone'\r\nimport { parse as parseSRT, stringify as stringifySRT } from 'subtitle';\r\nimport { saveAs } from 'file-saver';\r\n\r\nexport default class SentenceSRT2WordSRT extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    this.onTextAreaChange = this.onTextAreaChange.bind(this);\r\n  }\r\n\r\n  parseWord = (word) => {\r\n    //remove leading and trailing character space,.!\r\n    word = word.replace(/(^['\":,.!?\\s]+)|(['\":,.!?\\s]+$)/g, '');\r\n    return word;\r\n  }\r\n\r\n  onTextAreaChange(event) {\r\n    let para = event.target.value;\r\n    let sentences = para.split(\"\\n\");\r\n    let words = sentences.map(_=>_.split(\" \").map(this.parseWord).filter(_=>_!=\"\"));\r\n  }\r\n\r\n  handleDroppedFile = (file) => {\r\n    const value = file.result;\r\n    this.setState({ value });\r\n  }\r\n  \r\n\r\n  readFile = async (file) => {\r\n    return await new Promise((resolve) => {\r\n      let reader = new FileReader();\r\n      reader.onloadend = () => resolve(reader.result);\r\n      reader.readAsText(file);\r\n    });\r\n  }\r\n\r\n\r\n  sentence2wordSRT = (parsedSRT) => {\r\n    let { start, text } = parsedSRT;\r\n    let words = text.split(\" \").map(this.parseWord).filter(_=>_!=\"\");\r\n    return words.map((text,i)=>({ start: i==0?start:0, end:i==0?start:0, text }));\r\n  }\r\n\r\n\r\n  getFileName = (file) => {\r\n    let outFilePathComponent = file.path.split('.');\r\n    outFilePathComponent.pop();\r\n    return outFilePathComponent.join(\".\");\r\n  }\r\n\r\n\r\n  \r\n\r\n  convert = async (file) => {\r\n    let content = await this.readFile(file);\r\n    let parsed = parseSRT(content);\r\n\r\n    //output words SRT\r\n    let wordsSRT = [].concat(...parsed.map(this.sentence2wordSRT));\r\n    let outputData = stringifySRT(wordsSRT);\r\n    let blob = new Blob([outputData], {type: \"text/plain;charset=utf-8\"});\r\n \r\n    let fn = this.getFileName(file);\r\n    saveAs(blob, `${fn}_word.srt`);\r\n\r\n\r\n    const specialWords = [\r\n      'e.g.', 'a.m.', 'p.m.'\r\n    ];\r\n    //output sentence CSV\r\n    outputData = \"\\uFEFF\";\r\n    outputData += \"start_ms,end_ms,id,word_count,en,hk,cn,tw,jp,kr\\n\";\r\n    outputData += parsed.map(_=>{\r\n      let text = _.text;\r\n      specialWords.forEach(_=>text=text.replace(_, 'word'));\r\n      //replace\r\n      text = text.replace(/-/g,' ');\r\n      text = text.replace(/,/g,' ');\r\n      text = text.replace(/\\./g,' ');\r\n      text = text.replace(/!/g,' ');\r\n      text = text.replace(/;/g,' ');\r\n      const wordCount = text.split(' ').filter(_=>_!='').length;\r\n      return `${_.start},${_.end},,${wordCount},\"${_.text}\",,,,,`;\r\n    }).join(\"\\n\");\r\n    blob = new Blob([outputData], {type: \"text/plain;charset=utf-8\"});\r\n    saveAs(blob, `${fn}.csv`);\r\n    \r\n  }\r\n\r\n  onDrop = async (acceptedFiles) => {\r\n    acceptedFiles.forEach(this.convert);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dropzone onDrop={this.onDrop}>\r\n        {({getRootProps, getInputProps}) => (\r\n          <section >\r\n            <div {...getRootProps()} style={{ border: '1px solid black', maxWidth: '100%', color: 'black', margin: 20 }}>\r\n              <input {...getInputProps()} />\r\n              <center><h1>1. Sentences SRT -> Words SRT + Sentences CSV </h1></center>\r\n            </div>\r\n          </section>\r\n        )}\r\n      </Dropzone>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport Dropzone from 'react-dropzone'\r\nimport { saveAs } from 'file-saver';\r\nimport Csv from \"csvtojson\";\r\nimport { parse as parseSRT, stringify as stringifySRT } from 'subtitle';\r\nimport JSZip from \"jszip\";\r\n\r\nexport default class SentenceCSV2DataFiles extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    this.onTextAreaChange = this.onTextAreaChange.bind(this);\r\n  }\r\n\r\n  parseWord = (word) => {\r\n    //remove leading and trailing character space,.!\r\n    word = word.replace(/(^['\":,.!?\\s]+)|(['\":,.!?\\s]+$)/g, '');\r\n    return word;\r\n  }\r\n\r\n  onTextAreaChange(event) {\r\n    let para = event.target.value;\r\n    let sentences = para.split(\"\\n\");\r\n    let words = sentences.map(_=>_.split(\" \").map(this.parseWord).filter(_=>_!=\"\"));\r\n  }\r\n\r\n  handleDroppedFile = (file) => {\r\n    const value = file.result;\r\n    this.setState({ value });\r\n  }\r\n  \r\n\r\n  readFile = async (file) => {\r\n    return await new Promise((resolve) => {\r\n      let reader = new FileReader();\r\n      reader.onloadend = () => resolve(reader.result);\r\n      reader.readAsText(file);\r\n    });\r\n  }\r\n\r\n\r\n  sentence2wordSRT = (parsedSRT) => {\r\n    let { start, text } = parsedSRT;\r\n    let words = text.split(\" \").map(this.parseWord).filter(_=>_!=\"\");\r\n    return words.map((text,i)=>({ start: i==0?start:0, end:i==0?start:0, text }));\r\n  }\r\n\r\n\r\n  convert = async (files) => {\r\n\r\n    //CSV => data files\r\n    let content = await this.readFile(files.csv);\r\n    content = content.replace(\"\\uFEFF\", \"\");\r\n    \r\n    let zip = new JSZip();\r\n    let data = await Csv().fromString(content);\r\n    //time file\r\n    zip.file(\"time\", data.map(_=>`${_.start_ms} ${_.end_ms}`).join(\"\\n\"));\r\n    //other field\r\n    ['id', 'en', 'hk', 'cn', 'tw', 'jp', 'kr'].forEach(fn=>{\r\n      zip.file(`${fn}`, data.map(_=>_[fn]).join(\"\\n\"));\r\n    })\r\n\r\n\r\n    //tuning of words srt files \r\n    let sentenceTimeRanges = data.map(_=>({ text:_.en, start:parseInt(_.start_ms), end:parseInt(_.end_ms)}));\r\n    content = await this.readFile(files.srt);\r\n    let parsed = parseSRT(content);\r\n\r\n    console.log(`sentenceTimeRanges:${JSON.stringify(sentenceTimeRanges)}`);\r\n    console.log(`parsed[0]:${JSON.stringify(parsed[0])}`);\r\n    \r\n\r\n    let curIndex = 0, curSentence = {...sentenceTimeRanges[0]};\r\n    let invalidRecords = [], outboundRecords = [], tunedRecords = [];\r\n    let turned = parsed.map(_=>{\r\n      //check time range\r\n      while(curSentence.text.indexOf(_.text) == -1){\r\n        //check if moving to next sentence?\r\n        let nextSentence = {...sentenceTimeRanges[curIndex+1]}\r\n        if(nextSentence && nextSentence.text.indexOf(_.text) != -1){\r\n          curIndex = curIndex + 1;\r\n          curSentence = nextSentence;\r\n        }else{\r\n          invalidRecords.push(_);\r\n          return null;\r\n        }\r\n      }\r\n\r\n      let { text, start, end } = curSentence;\r\n\r\n      let returnSrt = null;\r\n      if(_.end < start || _.start > end) outboundRecords.push(_);\r\n      else if(_.start >= start && _.end <= end) returnSrt = _;\r\n      else if(_.start < start) returnSrt = { ..._, start };\r\n      else if(_.end > end) returnSrt = { ..._, end };\r\n\r\n      if(returnSrt){\r\n        if(returnSrt != _) tunedRecords.push({ from:_, to: returnSrt });\r\n        curSentence.text = text.substring(text.indexOf(_.text) + _.text.length);\r\n      }\r\n      return returnSrt;\r\n    }).filter(_=>_!=null);\r\n\r\n\r\n\r\n\r\n    //output words SRT\r\n    // let wordsSRT = [].concat(...parsed.map(this.sentence2wordSRT));\r\n    let outputData = stringifySRT(turned);\r\n    zip.file('word_tuned.srt', outputData);\r\n\r\n    zip.file('word_srt_tuned_report.txt', `invalid records:\\n${JSON.stringify(invalidRecords, null, 2)}\\noutbound records:\\n${JSON.stringify(outboundRecords, null, 2)}\\ntuned records:\\n${JSON.stringify(tunedRecords, null, 2)}`)\r\n\r\n    let blob = await zip.generateAsync({type:\"blob\"});\r\n    let outFilePathComponent = files.csv.path.split('.');\r\n    outFilePathComponent.pop();\r\n    saveAs(blob, `${outFilePathComponent.join(\".\")}.zip`);\r\n  }\r\n\r\n  onDrop = async (acceptedFiles) => {\r\n    let files = {\r\n      csv: acceptedFiles.find(f=>f.path.endsWith('.csv')),\r\n      srt: acceptedFiles.find(f=>f.path.endsWith('.srt'))\r\n    }\r\n    if(!files.csv || !files.srt) alert('please drop sentence csv and word srt files to me')\r\n    this.convert(files);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dropzone onDrop={this.onDrop}>\r\n        {({getRootProps, getInputProps}) => (\r\n          <section >\r\n            <div {...getRootProps()} style={{ border: '1px solid black', maxWidth: '100%', color: 'black', margin: 20 }}>\r\n              <input {...getInputProps()} />\r\n              <center><h1>2. Words SRT + Sentence CSV -> Tuned Words SRT + Data Zip</h1></center>\r\n            </div>\r\n          </section>\r\n        )}\r\n      </Dropzone>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Dropzone from 'react-dropzone'\r\nimport { saveAs } from 'file-saver';\r\n\r\nexport default class I18nJSON2CSV extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    this.onTextAreaChange = this.onTextAreaChange.bind(this);\r\n  }\r\n\r\n  parseWord = (word) => {\r\n    //remove leading and trailing character space,.!\r\n    word = word.replace(/(^['\":,.!?\\s]+)|(['\":,.!?\\s]+$)/g, '');\r\n    return word;\r\n  }\r\n\r\n  onTextAreaChange(event) {\r\n    let para = event.target.value;\r\n    let sentences = para.split(\"\\n\");\r\n    let words = sentences.map(_=>_.split(\" \").map(this.parseWord).filter(_=>_!=\"\"));\r\n  }\r\n\r\n  handleDroppedFile = (file) => {\r\n    const value = file.result;\r\n    this.setState({ value });\r\n  }\r\n  \r\n\r\n  readFile = async (file) => {\r\n    return await new Promise((resolve) => {\r\n      let reader = new FileReader();\r\n      reader.onloadend = () => resolve(reader.result);\r\n      reader.readAsText(file);\r\n    });\r\n  }\r\n\r\n\r\n  sentence2wordSRT = (parsedSRT) => {\r\n    let { start, text } = parsedSRT;\r\n    let words = text.split(\" \").map(this.parseWord).filter(_=>_!=\"\");\r\n    return words.map((text,i)=>({ start: i==0?start:0, end:i==0?start:0, text }));\r\n  }\r\n\r\n\r\n  getFileName = (file) => {\r\n    let outFilePathComponent = file.path.split('.');\r\n    outFilePathComponent.pop();\r\n    return outFilePathComponent.join(\".\");\r\n  }\r\n\r\n  convert = async (file) => {\r\n    let content = await this.readFile(file);\r\n    let parsed = JSON.parse(content);\r\n\r\n    //output sentence CSV\r\n    let outputData = \"\\uFEFF\";\r\n    outputData += \"id,en,translate\\n\";\r\n    outputData += Object.keys(parsed).map(_=>`${_},\"${parsed[_].replace(new RegExp('\\n','g'),'\\r')}\",`).join(\"\\n\");\r\n    let blob = new Blob([outputData], {type: \"text/plain;charset=utf-8\"});\r\n\r\n    let fn = this.getFileName(file);\r\n    saveAs(blob, `${fn}.csv`);\r\n  }\r\n\r\n  onDrop = async (acceptedFiles) => {\r\n    acceptedFiles.forEach(this.convert);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dropzone onDrop={this.onDrop}>\r\n        {({getRootProps, getInputProps}) => (\r\n          <section >\r\n            <div {...getRootProps()} style={{ border: '1px solid black', maxWidth: '100%', color: 'black', margin: 20 }}>\r\n              <input {...getInputProps()} />\r\n              <center><h1>I18n JSON -> CSV</h1></center>\r\n            </div>\r\n          </section>\r\n        )}\r\n      </Dropzone>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport Dropzone from 'react-dropzone'\r\nimport { saveAs } from 'file-saver';\r\nimport Csv from \"csvtojson\";\r\nimport JSZip from \"jszip\";\r\n\r\nexport default class ConsolidatedCSV2I18nJSONFiles extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n    this.onTextAreaChange = this.onTextAreaChange.bind(this);\r\n  }\r\n\r\n  parseWord = (word) => {\r\n    //remove leading and trailing character space,.!\r\n    word = word.replace(/(^['\":,.!?\\s]+)|(['\":,.!?\\s]+$)/g, '');\r\n    return word;\r\n  }\r\n\r\n  onTextAreaChange(event) {\r\n    let para = event.target.value;\r\n    let sentences = para.split(\"\\n\");\r\n    let words = sentences.map(_=>_.split(\" \").map(this.parseWord).filter(_=>_!=\"\"));\r\n  }\r\n\r\n  handleDroppedFile = (file) => {\r\n    const value = file.result;\r\n    this.setState({ value });\r\n  }\r\n  \r\n\r\n  readFile = async (file) => {\r\n    return await new Promise((resolve) => {\r\n      let reader = new FileReader();\r\n      reader.onloadend = () => resolve(reader.result);\r\n      reader.readAsText(file);\r\n    });\r\n  }\r\n\r\n\r\n  sentence2wordSRT = (parsedSRT) => {\r\n    let { start, text } = parsedSRT;\r\n    let words = text.split(\" \").map(this.parseWord).filter(_=>_!=\"\");\r\n    return words.map((text,i)=>({ start: i==0?start:0, end:i==0?start:0, text }));\r\n  }\r\n\r\n\r\n  getFileName = (file) => {\r\n    let outFilePathComponent = file.path.split('.');\r\n    outFilePathComponent.pop();\r\n    return outFilePathComponent.join(\".\");\r\n  }\r\n\r\n  convert = async (file) => {\r\n    let content = await this.readFile(file);\r\n    content = content.replace(\"\\uFEFF\", \"\");\r\n    let data = await Csv().fromString(content);\r\n \r\n\r\n    let zip = new JSZip();\r\n    \r\n    //get fields details\r\n    let { id, ...fields } = data[0];\r\n    let langs = Object.keys(fields);\r\n    \r\n    langs.forEach(lang=>{\r\n      let i18nJSON = {}\r\n      data.forEach(_=>i18nJSON[_.id] = _[lang]);\r\n      delete i18nJSON[\"\"];  //remove empty key\r\n      zip.file(`${lang}`, JSON.stringify(i18nJSON));\r\n    });\r\n\r\n    let blob = await zip.generateAsync({type:\"blob\"});\r\n    saveAs(blob, `${this.getFileName(file)}.zip`);\r\n\r\n  }\r\n\r\n  onDrop = async (acceptedFiles) => {\r\n    acceptedFiles.forEach(this.convert);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dropzone onDrop={this.onDrop}>\r\n        {({getRootProps, getInputProps}) => (\r\n          <section >\r\n            <div {...getRootProps()} style={{ border: '1px solid black', maxWidth: '100%', color: 'black', margin: 20 }}>\r\n              <input {...getInputProps()} />\r\n              <center><h1>Cosolidated I18n CSV -> I18n JSON Data Files</h1></center>\r\n            </div>\r\n          </section>\r\n        )}\r\n      </Dropzone>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport SentenceSRT2WordSRT from  './Components/SentenceSRT2WordSRT'\r\nimport SentenceCSV2DataFiles from  './Components/SentenceCSV2DataFiles'\r\nimport I18nJSON2CSV from './Components/I18nJSON2CSV'\r\nimport ConsolidatedCSV2I18nJSONFiles from './Components/ConsolidatedCSV2I18nJSONFiles'\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <SentenceSRT2WordSRT />\r\n        <SentenceCSV2DataFiles />\r\n        <I18nJSON2CSV />\r\n        <ConsolidatedCSV2I18nJSONFiles />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}