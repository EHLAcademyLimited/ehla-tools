{"version":3,"sources":["Components/SentenceSRT2WordSRT.js","App.js","serviceWorker.js","index.js"],"names":["SentenceSRT2WordSRT","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","parseWord","word","replace","handleDroppedFile","file","value","result","setState","readFile","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","Promise","resolve","reader","FileReader","onloadend","readAsText","abrupt","sent","stop","_x","apply","arguments","sentence2wordSRT","parsedSRT","start","text","split","map","filter","_","i","end","convert","_ref2","_callee2","_ref3","content","parsed","wordsSRT","outputData","blob","outFilePathComponent","_context2","parseSRT","concat","toConsumableArray","stringifySRT","Blob","type","path","pop","saveAs","join","_x2","onDrop","_ref4","_callee3","acceptedFiles","_context3","forEach","_x3","state","onTextAreaChange","bind","assertThisInitialized","event","_this2","target","react_default","createElement","es","_ref5","getRootProps","getInputProps","assign","style","border","maxWidth","color","margin","Component","App","className","SentenceSRT2WordSRT_SentenceSRT2WordSRT","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.57e17cac.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Dropzone from 'react-dropzone'\nimport { parse as parseSRT, stringify as stringifySRT } from 'subtitle';\nimport { saveAs } from 'file-saver';\n\nexport default class SentenceSRT2WordSRT extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.onTextAreaChange = this.onTextAreaChange.bind(this);\n  }\n\n  parseWord = (word) => {\n    //remove leading and trailing character space,.!\n    word = word.replace(/(^['\":,.!?\\s]+)|(['\":,.!?\\s]+$)/g, '');\n    return word;\n  }\n\n  onTextAreaChange(event) {\n    let para = event.target.value;\n    let sentences = para.split(\"\\n\");\n    let words = sentences.map(_=>_.split(\" \").map(this.parseWord).filter(_=>_!=\"\"));\n  }\n\n  handleDroppedFile = (file) => {\n    const value = file.result;\n    this.setState({ value });\n  }\n  \n\n  readFile = async (file) => {\n    return await new Promise((resolve) => {\n      let reader = new FileReader();\n      reader.onloadend = () => resolve(reader.result);\n      reader.readAsText(file);\n    });\n  }\n\n\n  sentence2wordSRT = (parsedSRT) => {\n    let { start, text } = parsedSRT;\n    let words = text.split(\" \").map(this.parseWord).filter(_=>_!=\"\");\n    return words.map((text,i)=>({ start: i==0?start:0, end: 0, text }));\n  }\n\n\n  convert = async (file) => {\n    let content = await this.readFile(file);\n    let parsed = parseSRT(content);\n    let wordsSRT = [].concat(...parsed.map(this.sentence2wordSRT));\n    let outputData = stringifySRT(wordsSRT);\n    let blob = new Blob([outputData], {type: \"text/plain;charset=utf-8\"});\n\n    let outFilePathComponent = file.path.split('.');\n    outFilePathComponent.pop();\n    saveAs(blob, `${outFilePathComponent.join(\".\")}_word.srt`);\n  }\n\n  onDrop = async (acceptedFiles) => {\n    acceptedFiles.forEach(this.convert);\n  }\n\n  render() {\n    return (\n      <Dropzone onDrop={this.onDrop}>\n        {({getRootProps, getInputProps}) => (\n          <section >\n            <div {...getRootProps()} style={{ border: '1px solid black', maxWidth: '100%', color: 'black', margin: 20 }}>\n              <input {...getInputProps()} />\n              <center><h1>Drag files here to convert sentance srt to words srt</h1></center>\n            </div>\n          </section>\n        )}\n      </Dropzone>\n    );\n  }\n}","import React, { Component } from 'react';\nimport SentenceSRT2WordSRT from  './Components/SentenceSRT2WordSRT'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <SentenceSRT2WordSRT />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}