{"version":3,"sources":["Components/SentenceSRT2WordSRT.js","Components/SentenceCSV2DataFiles.js","Components/I18nJSON2CSV.js","Components/ConsolidatedCSV2I18nJSONFiles.js","App.js","serviceWorker.js","index.js"],"names":["SentenceSRT2WordSRT","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","parseWord","word","replace","handleDroppedFile","file","value","result","setState","readFile","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","Promise","resolve","reader","FileReader","onloadend","readAsText","abrupt","sent","stop","_x","apply","arguments","sentence2wordSRT","parsedSRT","start","text","split","map","filter","_","i","end","getFileName","outFilePathComponent","path","pop","join","convert","_ref2","_callee2","_ref3","content","parsed","wordsSRT","outputData","blob","fn","_context2","parseSRT","concat","toConsumableArray","stringifySRT","Blob","type","saveAs","_x2","onDrop","_ref4","_callee3","acceptedFiles","_context3","forEach","_x3","state","onTextAreaChange","bind","assertThisInitialized","event","_this2","target","react_default","createElement","es","_ref5","getRootProps","getInputProps","assign","style","border","maxWidth","color","margin","Component","SentenceCSV2DataFiles","files","zip","data","sentenceTimeRanges","curIndex","curSentence","invalidRecords","outboundRecords","tunedRecords","turned","csv","JSZip","Csv","fromString","start_ms","end_ms","en","parseInt","srt","console","log","JSON","stringify","objectSpread","indexOf","nextSentence","push","_curSentence","returnSrt","from","to","substring","length","generateAsync","find","f","endsWith","alert","I18nJSON2CSV","parse","keys","RegExp","ConsolidatedCSV2I18nJSONFiles","_data$","fields","id","objectWithoutProperties","lang","i18nJSON","App","className","SentenceSRT2WordSRT_SentenceSRT2WordSRT","SentenceCSV2DataFiles_SentenceCSV2DataFiles","I18nJSON2CSV_I18nJSON2CSV","ConsolidatedCSV2I18nJSONFiles_ConsolidatedCSV2I18nJSONFiles","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f77077eb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Dropzone from 'react-dropzone'\nimport { parse as parseSRT, stringify as stringifySRT } from 'subtitle';\nimport { saveAs } from 'file-saver';\n\nexport default class SentenceSRT2WordSRT extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.onTextAreaChange = this.onTextAreaChange.bind(this);\n  }\n\n  parseWord = (word) => {\n    //remove leading and trailing character space,.!\n    word = word.replace(/(^['\":,.!?\\s]+)|(['\":,.!?\\s]+$)/g, '');\n    return word;\n  }\n\n  onTextAreaChange(event) {\n    let para = event.target.value;\n    let sentences = para.split(\"\\n\");\n    let words = sentences.map(_=>_.split(\" \").map(this.parseWord).filter(_=>_!=\"\"));\n  }\n\n  handleDroppedFile = (file) => {\n    const value = file.result;\n    this.setState({ value });\n  }\n  \n\n  readFile = async (file) => {\n    return await new Promise((resolve) => {\n      let reader = new FileReader();\n      reader.onloadend = () => resolve(reader.result);\n      reader.readAsText(file);\n    });\n  }\n\n\n  sentence2wordSRT = (parsedSRT) => {\n    let { start, text } = parsedSRT;\n    let words = text.split(\" \").map(this.parseWord).filter(_=>_!=\"\");\n    return words.map((text,i)=>({ start: i==0?start:0, end:i==0?start:0, text }));\n  }\n\n\n  getFileName = (file) => {\n    let outFilePathComponent = file.path.split('.');\n    outFilePathComponent.pop();\n    return outFilePathComponent.join(\".\");\n  }\n\n  convert = async (file) => {\n    let content = await this.readFile(file);\n    let parsed = parseSRT(content);\n\n    //output words SRT\n    let wordsSRT = [].concat(...parsed.map(this.sentence2wordSRT));\n    let outputData = stringifySRT(wordsSRT);\n    let blob = new Blob([outputData], {type: \"text/plain;charset=utf-8\"});\n \n    let fn = this.getFileName(file);\n    saveAs(blob, `${fn}_word.srt`);\n\n    //output sentence CSV\n    outputData = \"\\uFEFF\";\n    outputData += \"start_ms,end_ms,id,en,hk,cn,tw,jp,kr\\n\";\n    outputData += parsed.map(_=>`${_.start},${_.end},,\"${_.text}\",,,,,`).join(\"\\n\");\n    blob = new Blob([outputData], {type: \"text/plain;charset=utf-8\"});\n    saveAs(blob, `${fn}.csv`);\n    \n  }\n\n  onDrop = async (acceptedFiles) => {\n    acceptedFiles.forEach(this.convert);\n  }\n\n  render() {\n    return (\n      <Dropzone onDrop={this.onDrop}>\n        {({getRootProps, getInputProps}) => (\n          <section >\n            <div {...getRootProps()} style={{ border: '1px solid black', maxWidth: '100%', color: 'black', margin: 20 }}>\n              <input {...getInputProps()} />\n              <center><h1>1. Sentences SRT -> Words SRT + Sentences CSV </h1></center>\n            </div>\n          </section>\n        )}\n      </Dropzone>\n    );\n  }\n}","import React, { Component } from 'react';\nimport Dropzone from 'react-dropzone'\nimport { saveAs } from 'file-saver';\nimport Csv from \"csvtojson\";\nimport { parse as parseSRT, stringify as stringifySRT } from 'subtitle';\nimport JSZip from \"jszip\";\n\nexport default class SentenceCSV2DataFiles extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.onTextAreaChange = this.onTextAreaChange.bind(this);\n  }\n\n  parseWord = (word) => {\n    //remove leading and trailing character space,.!\n    word = word.replace(/(^['\":,.!?\\s]+)|(['\":,.!?\\s]+$)/g, '');\n    return word;\n  }\n\n  onTextAreaChange(event) {\n    let para = event.target.value;\n    let sentences = para.split(\"\\n\");\n    let words = sentences.map(_=>_.split(\" \").map(this.parseWord).filter(_=>_!=\"\"));\n  }\n\n  handleDroppedFile = (file) => {\n    const value = file.result;\n    this.setState({ value });\n  }\n  \n\n  readFile = async (file) => {\n    return await new Promise((resolve) => {\n      let reader = new FileReader();\n      reader.onloadend = () => resolve(reader.result);\n      reader.readAsText(file);\n    });\n  }\n\n\n  sentence2wordSRT = (parsedSRT) => {\n    let { start, text } = parsedSRT;\n    let words = text.split(\" \").map(this.parseWord).filter(_=>_!=\"\");\n    return words.map((text,i)=>({ start: i==0?start:0, end:i==0?start:0, text }));\n  }\n\n\n  convert = async (files) => {\n\n    //CSV => data files\n    let content = await this.readFile(files.csv);\n    content = content.replace(\"\\uFEFF\", \"\");\n    \n    let zip = new JSZip();\n    let data = await Csv().fromString(content);\n    //time file\n    zip.file(\"time\", data.map(_=>`${_.start_ms} ${_.end_ms}`).join(\"\\n\"));\n    //other field\n    ['id', 'en', 'hk', 'cn', 'tw', 'jp', 'kr'].forEach(fn=>{\n      zip.file(`${fn}`, data.map(_=>_[fn]).join(\"\\n\"));\n    })\n\n\n    //tuning of words srt files \n    let sentenceTimeRanges = data.map(_=>({ text:_.en, start:parseInt(_.start_ms), end:parseInt(_.end_ms)}));\n    content = await this.readFile(files.srt);\n    let parsed = parseSRT(content);\n\n    console.log(`sentenceTimeRanges:${JSON.stringify(sentenceTimeRanges)}`);\n    console.log(`parsed[0]:${JSON.stringify(parsed[0])}`);\n    \n\n    let curIndex = 0, curSentence = {...sentenceTimeRanges[0]};\n    let invalidRecords = [], outboundRecords = [], tunedRecords = [];\n    let turned = parsed.map(_=>{\n      //check time range\n      while(curSentence.text.indexOf(_.text) == -1){\n        //check if moving to next sentence?\n        let nextSentence = {...sentenceTimeRanges[curIndex+1]}\n        if(nextSentence && nextSentence.text.indexOf(_.text) != -1){\n          curIndex = curIndex + 1;\n          curSentence = nextSentence;\n        }else{\n          invalidRecords.push(_);\n          return null;\n        }\n      }\n\n      let { text, start, end } = curSentence;\n\n      let returnSrt = null;\n      if(_.end < start || _.start > end) outboundRecords.push(_);\n      else if(_.start >= start && _.end <= end) returnSrt = _;\n      else if(_.start < start) returnSrt = { ..._, start };\n      else if(_.end > end) returnSrt = { ..._, end };\n\n      if(returnSrt){\n        if(returnSrt != _) tunedRecords.push({ from:_, to: returnSrt });\n        curSentence.text = text.substring(text.indexOf(_.text) + _.text.length);\n      }\n      return returnSrt;\n    }).filter(_=>_!=null);\n\n\n\n\n    //output words SRT\n    // let wordsSRT = [].concat(...parsed.map(this.sentence2wordSRT));\n    let outputData = stringifySRT(turned);\n    zip.file('word_tuned.srt', outputData);\n\n    zip.file('word_srt_tuned_report.txt', `invalid records:\\n${JSON.stringify(invalidRecords, null, 2)}\\noutbound records:\\n${JSON.stringify(outboundRecords, null, 2)}\\ntuned records:\\n${JSON.stringify(tunedRecords, null, 2)}`)\n\n    let blob = await zip.generateAsync({type:\"blob\"});\n    let outFilePathComponent = files.csv.path.split('.');\n    outFilePathComponent.pop();\n    saveAs(blob, `${outFilePathComponent.join(\".\")}.zip`);\n  }\n\n  onDrop = async (acceptedFiles) => {\n    let files = {\n      csv: acceptedFiles.find(f=>f.path.endsWith('.csv')),\n      srt: acceptedFiles.find(f=>f.path.endsWith('.srt'))\n    }\n    if(!files.csv || !files.srt) alert('please drop sentence csv and word srt files to me')\n    this.convert(files);\n  }\n\n  render() {\n    return (\n      <Dropzone onDrop={this.onDrop}>\n        {({getRootProps, getInputProps}) => (\n          <section >\n            <div {...getRootProps()} style={{ border: '1px solid black', maxWidth: '100%', color: 'black', margin: 20 }}>\n              <input {...getInputProps()} />\n              <center><h1>2. Words SRT + Sentence CSV -> Tuned Words SRT + Data Zip</h1></center>\n            </div>\n          </section>\n        )}\n      </Dropzone>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Dropzone from 'react-dropzone'\nimport { saveAs } from 'file-saver';\n\nexport default class I18nJSON2CSV extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.onTextAreaChange = this.onTextAreaChange.bind(this);\n  }\n\n  parseWord = (word) => {\n    //remove leading and trailing character space,.!\n    word = word.replace(/(^['\":,.!?\\s]+)|(['\":,.!?\\s]+$)/g, '');\n    return word;\n  }\n\n  onTextAreaChange(event) {\n    let para = event.target.value;\n    let sentences = para.split(\"\\n\");\n    let words = sentences.map(_=>_.split(\" \").map(this.parseWord).filter(_=>_!=\"\"));\n  }\n\n  handleDroppedFile = (file) => {\n    const value = file.result;\n    this.setState({ value });\n  }\n  \n\n  readFile = async (file) => {\n    return await new Promise((resolve) => {\n      let reader = new FileReader();\n      reader.onloadend = () => resolve(reader.result);\n      reader.readAsText(file);\n    });\n  }\n\n\n  sentence2wordSRT = (parsedSRT) => {\n    let { start, text } = parsedSRT;\n    let words = text.split(\" \").map(this.parseWord).filter(_=>_!=\"\");\n    return words.map((text,i)=>({ start: i==0?start:0, end:i==0?start:0, text }));\n  }\n\n\n  getFileName = (file) => {\n    let outFilePathComponent = file.path.split('.');\n    outFilePathComponent.pop();\n    return outFilePathComponent.join(\".\");\n  }\n\n  convert = async (file) => {\n    let content = await this.readFile(file);\n    let parsed = JSON.parse(content);\n\n    //output sentence CSV\n    let outputData = \"\\uFEFF\";\n    outputData += \"id,en,translate\\n\";\n    outputData += Object.keys(parsed).map(_=>`${_},\"${parsed[_].replace(new RegExp('\\n','g'),'\\r')}\",`).join(\"\\n\");\n    let blob = new Blob([outputData], {type: \"text/plain;charset=utf-8\"});\n\n    let fn = this.getFileName(file);\n    saveAs(blob, `${fn}.csv`);\n  }\n\n  onDrop = async (acceptedFiles) => {\n    acceptedFiles.forEach(this.convert);\n  }\n\n  render() {\n    return (\n      <Dropzone onDrop={this.onDrop}>\n        {({getRootProps, getInputProps}) => (\n          <section >\n            <div {...getRootProps()} style={{ border: '1px solid black', maxWidth: '100%', color: 'black', margin: 20 }}>\n              <input {...getInputProps()} />\n              <center><h1>I18n JSON -> CSV</h1></center>\n            </div>\n          </section>\n        )}\n      </Dropzone>\n    );\n  }\n}","import React, { Component } from 'react';\nimport Dropzone from 'react-dropzone'\nimport { saveAs } from 'file-saver';\nimport Csv from \"csvtojson\";\nimport JSZip from \"jszip\";\n\nexport default class ConsolidatedCSV2I18nJSONFiles extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.onTextAreaChange = this.onTextAreaChange.bind(this);\n  }\n\n  parseWord = (word) => {\n    //remove leading and trailing character space,.!\n    word = word.replace(/(^['\":,.!?\\s]+)|(['\":,.!?\\s]+$)/g, '');\n    return word;\n  }\n\n  onTextAreaChange(event) {\n    let para = event.target.value;\n    let sentences = para.split(\"\\n\");\n    let words = sentences.map(_=>_.split(\" \").map(this.parseWord).filter(_=>_!=\"\"));\n  }\n\n  handleDroppedFile = (file) => {\n    const value = file.result;\n    this.setState({ value });\n  }\n  \n\n  readFile = async (file) => {\n    return await new Promise((resolve) => {\n      let reader = new FileReader();\n      reader.onloadend = () => resolve(reader.result);\n      reader.readAsText(file);\n    });\n  }\n\n\n  sentence2wordSRT = (parsedSRT) => {\n    let { start, text } = parsedSRT;\n    let words = text.split(\" \").map(this.parseWord).filter(_=>_!=\"\");\n    return words.map((text,i)=>({ start: i==0?start:0, end:i==0?start:0, text }));\n  }\n\n\n  getFileName = (file) => {\n    let outFilePathComponent = file.path.split('.');\n    outFilePathComponent.pop();\n    return outFilePathComponent.join(\".\");\n  }\n\n  convert = async (file) => {\n    let content = await this.readFile(file);\n    content = content.replace(\"\\uFEFF\", \"\");\n    let data = await Csv().fromString(content);\n \n\n    let zip = new JSZip();\n    \n    //get fields details\n    let { id, ...fields } = data[0];\n    let langs = Object.keys(fields);\n    \n    langs.forEach(lang=>{\n      let i18nJSON = {}\n      data.forEach(_=>i18nJSON[_.id] = _[lang]);\n      delete i18nJSON[\"\"];  //remove empty key\n      zip.file(`${lang}`, JSON.stringify(i18nJSON));\n    });\n\n    let blob = await zip.generateAsync({type:\"blob\"});\n    saveAs(blob, `${this.getFileName(file)}.zip`);\n\n  }\n\n  onDrop = async (acceptedFiles) => {\n    acceptedFiles.forEach(this.convert);\n  }\n\n  render() {\n    return (\n      <Dropzone onDrop={this.onDrop}>\n        {({getRootProps, getInputProps}) => (\n          <section >\n            <div {...getRootProps()} style={{ border: '1px solid black', maxWidth: '100%', color: 'black', margin: 20 }}>\n              <input {...getInputProps()} />\n              <center><h1>Cosolidated I18n CSV -> I18n JSON Data Files</h1></center>\n            </div>\n          </section>\n        )}\n      </Dropzone>\n    );\n  }\n}","import React, { Component } from 'react';\nimport SentenceSRT2WordSRT from  './Components/SentenceSRT2WordSRT'\nimport SentenceCSV2DataFiles from  './Components/SentenceCSV2DataFiles'\nimport I18nJSON2CSV from './Components/I18nJSON2CSV'\nimport ConsolidatedCSV2I18nJSONFiles from './Components/ConsolidatedCSV2I18nJSONFiles'\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <SentenceSRT2WordSRT />\n        <SentenceCSV2DataFiles />\n        <I18nJSON2CSV />\n        <ConsolidatedCSV2I18nJSONFiles />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}