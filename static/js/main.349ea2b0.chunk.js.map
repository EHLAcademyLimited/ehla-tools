{"version":3,"sources":["Components/SentenceSRT2WordSRT.js","Components/SentenceCSV2DataFiles.js","Components/I18nJSON2CSV.js","Components/ConsolidatedCSV2I18nJSONFiles.js","Components/GetCNRegionBase.js","App.js","serviceWorker.js","index.js"],"names":["SentenceSRT2WordSRT","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","parseWord","word","replace","handleDroppedFile","file","value","result","setState","readFile","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","Promise","resolve","reader","FileReader","onloadend","readAsText","abrupt","sent","stop","_x","apply","arguments","sentence2wordSRT","parsedSRT","start","text","split","map","filter","_","i","end","getFileName","outFilePathComponent","path","pop","join","convert","_ref2","_callee2","_ref3","content","parsed","wordsSRT","outputData","blob","fn","specialWords","_context2","parseSRT","concat","toConsumableArray","stringifySRT","Blob","type","saveAs","forEach","wordCount","length","_x2","onDrop","_ref4","_callee3","acceptedFiles","_context3","_x3","state","onTextAreaChange","bind","assertThisInitialized","event","_this2","target","react_default","createElement","es","_ref5","getRootProps","getInputProps","assign","style","border","maxWidth","color","margin","Component","SentenceCSV2DataFiles","files","zip","data","sentenceTimeRanges","curIndex","curSentence","invalidRecords","outboundRecords","tunedRecords","turned","csv","JSZip","Csv","fromString","start_ms","end_ms","en","parseInt","srt","console","log","JSON","stringify","objectSpread","indexOf","nextSentence","push","_curSentence","returnSrt","from","to","substring","generateAsync","find","f","endsWith","alert","I18nJSON2CSV","parse","keys","RegExp","ConsolidatedCSV2I18nJSONFiles","_data$","fields","id","objectWithoutProperties","lang","i18nJSON","GetCNRegionBase","resp","blog","workbook","sheet","parsePublisher","publisherFilter","vocab_publishers","grammar_publishers","listening_publishers","speaking_publishers","regions","fetch","ok","arrayBuffer","XLSX","Sheets","hasOwnProperty","sheet_to_json","name_ref","region_ids","level_ids","region_idxes","findIndex","r","level_values","levels","l","onClick","App","className","SentenceSRT2WordSRT_SentenceSRT2WordSRT","SentenceCSV2DataFiles_SentenceCSV2DataFiles","I18nJSON2CSV_I18nJSON2CSV","ConsolidatedCSV2I18nJSONFiles_ConsolidatedCSV2I18nJSONFiles","GetCNRegionBase_GetCNRegionBase","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.349ea2b0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Dropzone from 'react-dropzone'\nimport { parse as parseSRT, stringify as stringifySRT } from 'subtitle';\nimport { saveAs } from 'file-saver';\n\nexport default class SentenceSRT2WordSRT extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.onTextAreaChange = this.onTextAreaChange.bind(this);\n  }\n\n  parseWord = (word) => {\n    //remove leading and trailing character space,.!\n    word = word.replace(/(^['\":,.!?\\s]+)|(['\":,.!?\\s]+$)/g, '');\n    return word;\n  }\n\n  onTextAreaChange(event) {\n    let para = event.target.value;\n    let sentences = para.split(\"\\n\");\n    let words = sentences.map(_=>_.split(\" \").map(this.parseWord).filter(_=>_!=\"\"));\n  }\n\n  handleDroppedFile = (file) => {\n    const value = file.result;\n    this.setState({ value });\n  }\n  \n\n  readFile = async (file) => {\n    return await new Promise((resolve) => {\n      let reader = new FileReader();\n      reader.onloadend = () => resolve(reader.result);\n      reader.readAsText(file);\n    });\n  }\n\n\n  sentence2wordSRT = (parsedSRT) => {\n    let { start, text } = parsedSRT;\n    let words = text.split(\" \").map(this.parseWord).filter(_=>_!=\"\");\n    return words.map((text,i)=>({ start: i==0?start:0, end:i==0?start:0, text }));\n  }\n\n\n  getFileName = (file) => {\n    let outFilePathComponent = file.path.split('.');\n    outFilePathComponent.pop();\n    return outFilePathComponent.join(\".\");\n  }\n\n\n  \n\n  convert = async (file) => {\n    let content = await this.readFile(file);\n    let parsed = parseSRT(content);\n\n    //output words SRT\n    let wordsSRT = [].concat(...parsed.map(this.sentence2wordSRT));\n    let outputData = stringifySRT(wordsSRT);\n    let blob = new Blob([outputData], {type: \"text/plain;charset=utf-8\"});\n \n    let fn = this.getFileName(file);\n    saveAs(blob, `${fn}_word.srt`);\n\n\n    const specialWords = [\n      'e.g.', 'a.m.', 'p.m.'\n    ];\n    //output sentence CSV\n    outputData = \"\\uFEFF\";\n    outputData += \"start_ms,end_ms,id,word_count,en,hk,cn,tw,jp,kr\\n\";\n    outputData += parsed.map(_=>{\n      let text = _.text;\n      specialWords.forEach(_=>text=text.replace(_, 'word'));\n      //replace\n      text = text.replace(/-/g,' ');\n      text = text.replace(/,/g,' ');\n      text = text.replace(/\\./g,' ');\n      text = text.replace(/!/g,' ');\n      text = text.replace(/;/g,' ');\n      const wordCount = text.split(' ').filter(_=>_!='').length;\n      return `${_.start},${_.end},,${wordCount},\"${_.text}\",,,,,`;\n    }).join(\"\\n\");\n    blob = new Blob([outputData], {type: \"text/plain;charset=utf-8\"});\n    saveAs(blob, `${fn}.csv`);\n    \n  }\n\n  onDrop = async (acceptedFiles) => {\n    acceptedFiles.forEach(this.convert);\n  }\n\n  render() {\n    return (\n      <Dropzone onDrop={this.onDrop}>\n        {({getRootProps, getInputProps}) => (\n          <section >\n            <div {...getRootProps()} style={{ border: '1px solid black', maxWidth: '100%', color: 'black', margin: 20 }}>\n              <input {...getInputProps()} />\n              <center><h1>1. Sentences SRT -> Words SRT + Sentences CSV </h1></center>\n            </div>\n          </section>\n        )}\n      </Dropzone>\n    );\n  }\n}","import React, { Component } from 'react';\nimport Dropzone from 'react-dropzone'\nimport { saveAs } from 'file-saver';\nimport Csv from \"csvtojson\";\nimport { parse as parseSRT, stringify as stringifySRT } from 'subtitle';\nimport JSZip from \"jszip\";\n\nexport default class SentenceCSV2DataFiles extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.onTextAreaChange = this.onTextAreaChange.bind(this);\n  }\n\n  parseWord = (word) => {\n    //remove leading and trailing character space,.!\n    word = word.replace(/(^['\":,.!?\\s]+)|(['\":,.!?\\s]+$)/g, '');\n    return word;\n  }\n\n  onTextAreaChange(event) {\n    let para = event.target.value;\n    let sentences = para.split(\"\\n\");\n    let words = sentences.map(_=>_.split(\" \").map(this.parseWord).filter(_=>_!=\"\"));\n  }\n\n  handleDroppedFile = (file) => {\n    const value = file.result;\n    this.setState({ value });\n  }\n  \n\n  readFile = async (file) => {\n    return await new Promise((resolve) => {\n      let reader = new FileReader();\n      reader.onloadend = () => resolve(reader.result);\n      reader.readAsText(file);\n    });\n  }\n\n\n  sentence2wordSRT = (parsedSRT) => {\n    let { start, text } = parsedSRT;\n    let words = text.split(\" \").map(this.parseWord).filter(_=>_!=\"\");\n    return words.map((text,i)=>({ start: i==0?start:0, end:i==0?start:0, text }));\n  }\n\n\n  convert = async (files) => {\n\n    //CSV => data files\n    let content = await this.readFile(files.csv);\n    content = content.replace(\"\\uFEFF\", \"\");\n    \n    let zip = new JSZip();\n    let data = await Csv().fromString(content);\n    //time file\n    zip.file(\"time\", data.map(_=>`${_.start_ms} ${_.end_ms}`).join(\"\\n\"));\n    //other field\n    ['id', 'en', 'hk', 'cn', 'tw', 'jp', 'kr'].forEach(fn=>{\n      zip.file(`${fn}`, data.map(_=>_[fn]).join(\"\\n\"));\n    })\n\n\n    //tuning of words srt files \n    let sentenceTimeRanges = data.map(_=>({ text:_.en, start:parseInt(_.start_ms), end:parseInt(_.end_ms)}));\n    content = await this.readFile(files.srt);\n    let parsed = parseSRT(content);\n\n    console.log(`sentenceTimeRanges:${JSON.stringify(sentenceTimeRanges)}`);\n    console.log(`parsed[0]:${JSON.stringify(parsed[0])}`);\n    \n\n    let curIndex = 0, curSentence = {...sentenceTimeRanges[0]};\n    let invalidRecords = [], outboundRecords = [], tunedRecords = [];\n    let turned = parsed.map(_=>{\n      //check time range\n      while(curSentence.text.indexOf(_.text) == -1){\n        //check if moving to next sentence?\n        let nextSentence = {...sentenceTimeRanges[curIndex+1]}\n        if(nextSentence && nextSentence.text.indexOf(_.text) != -1){\n          curIndex = curIndex + 1;\n          curSentence = nextSentence;\n        }else{\n          invalidRecords.push(_);\n          return null;\n        }\n      }\n\n      let { text, start, end } = curSentence;\n\n      let returnSrt = null;\n      if(_.end < start || _.start > end) outboundRecords.push(_);\n      else if(_.start >= start && _.end <= end) returnSrt = _;\n      else if(_.start < start) returnSrt = { ..._, start };\n      else if(_.end > end) returnSrt = { ..._, end };\n\n      if(returnSrt){\n        if(returnSrt != _) tunedRecords.push({ from:_, to: returnSrt });\n        curSentence.text = text.substring(text.indexOf(_.text) + _.text.length);\n      }\n      return returnSrt;\n    }).filter(_=>_!=null);\n\n\n\n\n    //output words SRT\n    // let wordsSRT = [].concat(...parsed.map(this.sentence2wordSRT));\n    let outputData = stringifySRT(turned);\n    zip.file('word_tuned.srt', outputData);\n\n    zip.file('word_srt_tuned_report.txt', `invalid records:\\n${JSON.stringify(invalidRecords, null, 2)}\\noutbound records:\\n${JSON.stringify(outboundRecords, null, 2)}\\ntuned records:\\n${JSON.stringify(tunedRecords, null, 2)}`)\n\n    let blob = await zip.generateAsync({type:\"blob\"});\n    let outFilePathComponent = files.csv.path.split('.');\n    outFilePathComponent.pop();\n    saveAs(blob, `${outFilePathComponent.join(\".\")}.zip`);\n  }\n\n  onDrop = async (acceptedFiles) => {\n    let files = {\n      csv: acceptedFiles.find(f=>f.path.endsWith('.csv')),\n      srt: acceptedFiles.find(f=>f.path.endsWith('.srt'))\n    }\n    if(!files.csv || !files.srt) alert('please drop sentence csv and word srt files to me')\n    this.convert(files);\n  }\n\n  render() {\n    return (\n      <Dropzone onDrop={this.onDrop}>\n        {({getRootProps, getInputProps}) => (\n          <section >\n            <div {...getRootProps()} style={{ border: '1px solid black', maxWidth: '100%', color: 'black', margin: 20 }}>\n              <input {...getInputProps()} />\n              <center><h1>2. Words SRT + Sentence CSV -> Tuned Words SRT + Data Zip</h1></center>\n            </div>\n          </section>\n        )}\n      </Dropzone>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Dropzone from 'react-dropzone'\nimport { saveAs } from 'file-saver';\n\nexport default class I18nJSON2CSV extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.onTextAreaChange = this.onTextAreaChange.bind(this);\n  }\n\n  parseWord = (word) => {\n    //remove leading and trailing character space,.!\n    word = word.replace(/(^['\":,.!?\\s]+)|(['\":,.!?\\s]+$)/g, '');\n    return word;\n  }\n\n  onTextAreaChange(event) {\n    let para = event.target.value;\n    let sentences = para.split(\"\\n\");\n    let words = sentences.map(_=>_.split(\" \").map(this.parseWord).filter(_=>_!=\"\"));\n  }\n\n  handleDroppedFile = (file) => {\n    const value = file.result;\n    this.setState({ value });\n  }\n  \n\n  readFile = async (file) => {\n    return await new Promise((resolve) => {\n      let reader = new FileReader();\n      reader.onloadend = () => resolve(reader.result);\n      reader.readAsText(file);\n    });\n  }\n\n\n  sentence2wordSRT = (parsedSRT) => {\n    let { start, text } = parsedSRT;\n    let words = text.split(\" \").map(this.parseWord).filter(_=>_!=\"\");\n    return words.map((text,i)=>({ start: i==0?start:0, end:i==0?start:0, text }));\n  }\n\n\n  getFileName = (file) => {\n    let outFilePathComponent = file.path.split('.');\n    outFilePathComponent.pop();\n    return outFilePathComponent.join(\".\");\n  }\n\n  convert = async (file) => {\n    let content = await this.readFile(file);\n    let parsed = JSON.parse(content);\n\n    //output sentence CSV\n    let outputData = \"\\uFEFF\";\n    outputData += \"id,en,translate\\n\";\n    outputData += Object.keys(parsed).map(_=>`${_},\"${parsed[_].replace(new RegExp('\\n','g'),'\\r')}\",`).join(\"\\n\");\n    let blob = new Blob([outputData], {type: \"text/plain;charset=utf-8\"});\n\n    let fn = this.getFileName(file);\n    saveAs(blob, `${fn}.csv`);\n  }\n\n  onDrop = async (acceptedFiles) => {\n    acceptedFiles.forEach(this.convert);\n  }\n\n  render() {\n    return (\n      <Dropzone onDrop={this.onDrop}>\n        {({getRootProps, getInputProps}) => (\n          <section >\n            <div {...getRootProps()} style={{ border: '1px solid black', maxWidth: '100%', color: 'black', margin: 20 }}>\n              <input {...getInputProps()} />\n              <center><h1>I18n JSON -> CSV</h1></center>\n            </div>\n          </section>\n        )}\n      </Dropzone>\n    );\n  }\n}","import React, { Component } from 'react';\nimport Dropzone from 'react-dropzone'\nimport { saveAs } from 'file-saver';\nimport Csv from \"csvtojson\";\nimport JSZip from \"jszip\";\n\nexport default class ConsolidatedCSV2I18nJSONFiles extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.onTextAreaChange = this.onTextAreaChange.bind(this);\n  }\n\n  parseWord = (word) => {\n    //remove leading and trailing character space,.!\n    word = word.replace(/(^['\":,.!?\\s]+)|(['\":,.!?\\s]+$)/g, '');\n    return word;\n  }\n\n  onTextAreaChange(event) {\n    let para = event.target.value;\n    let sentences = para.split(\"\\n\");\n    let words = sentences.map(_=>_.split(\" \").map(this.parseWord).filter(_=>_!=\"\"));\n  }\n\n  handleDroppedFile = (file) => {\n    const value = file.result;\n    this.setState({ value });\n  }\n  \n\n  readFile = async (file) => {\n    return await new Promise((resolve) => {\n      let reader = new FileReader();\n      reader.onloadend = () => resolve(reader.result);\n      reader.readAsText(file);\n    });\n  }\n\n\n  sentence2wordSRT = (parsedSRT) => {\n    let { start, text } = parsedSRT;\n    let words = text.split(\" \").map(this.parseWord).filter(_=>_!=\"\");\n    return words.map((text,i)=>({ start: i==0?start:0, end:i==0?start:0, text }));\n  }\n\n\n  getFileName = (file) => {\n    let outFilePathComponent = file.path.split('.');\n    outFilePathComponent.pop();\n    return outFilePathComponent.join(\".\");\n  }\n\n  convert = async (file) => {\n    let content = await this.readFile(file);\n    content = content.replace(\"\\uFEFF\", \"\");\n    let data = await Csv().fromString(content);\n \n\n    let zip = new JSZip();\n    \n    //get fields details\n    let { id, ...fields } = data[0];\n    let langs = Object.keys(fields);\n    \n    langs.forEach(lang=>{\n      let i18nJSON = {}\n      data.forEach(_=>i18nJSON[_.id] = _[lang]);\n      delete i18nJSON[\"\"];  //remove empty key\n      zip.file(`${lang}`, JSON.stringify(i18nJSON));\n    });\n\n    let blob = await zip.generateAsync({type:\"blob\"});\n    saveAs(blob, `${this.getFileName(file)}.zip`);\n\n  }\n\n  onDrop = async (acceptedFiles) => {\n    acceptedFiles.forEach(this.convert);\n  }\n\n  render() {\n    return (\n      <Dropzone onDrop={this.onDrop}>\n        {({getRootProps, getInputProps}) => (\n          <section >\n            <div {...getRootProps()} style={{ border: '1px solid black', maxWidth: '100%', color: 'black', margin: 20 }}>\n              <input {...getInputProps()} />\n              <center><h1>Cosolidated I18n CSV -> I18n JSON Data Files</h1></center>\n            </div>\n          </section>\n        )}\n      </Dropzone>\n    );\n  }\n}","import React, { Component } from 'react';\nimport Dropzone from 'react-dropzone'\nimport { saveAs } from 'file-saver';\nimport Csv from \"csvtojson\";\nimport { parse as parseSRT, stringify as stringifySRT } from 'subtitle';\nimport JSZip from \"jszip\";\nimport * as XLSX from 'xlsx';\n\nexport default class GetCNRegionBase extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.onTextAreaChange = this.onTextAreaChange.bind(this);\n  }\n\n  parseWord = (word) => {\n    //remove leading and trailing character space,.!\n    word = word.replace(/(^['\":,.!?\\s]+)|(['\":,.!?\\s]+$)/g, '');\n    return word;\n  }\n\n  onTextAreaChange(event) {\n    let para = event.target.value;\n    let sentences = para.split(\"\\n\");\n    let words = sentences.map(_=>_.split(\" \").map(this.parseWord).filter(_=>_!=\"\"));\n  }\n\n  handleDroppedFile = (file) => {\n    const value = file.result;\n    this.setState({ value });\n  }\n  \n\n  readFile = async (file) => {\n    return await new Promise((resolve) => {\n      let reader = new FileReader();\n      reader.onloadend = () => resolve(reader.result);\n      reader.readAsText(file);\n    });\n  }\n\n\n  sentence2wordSRT = (parsedSRT) => {\n    let { start, text } = parsedSRT;\n    let words = text.split(\" \").map(this.parseWord).filter(_=>_!=\"\");\n    return words.map((text,i)=>({ start: i==0?start:0, end:i==0?start:0, text }));\n  }\n\n\n  getFileName = (file) => {\n    let outFilePathComponent = file.path.split('.');\n    outFilePathComponent.pop();\n    return outFilePathComponent.join(\".\");\n  }\n\n  convert = async () => {\n    let resp = await fetch(\"https://docs.google.com/spreadsheets/d/e/2PACX-1vSd9wPw4mD1f-Uvyk7DxRP892wFohetQzKABnLJq_T4bDfYbowuPP_hR98vu47eWdwUKI5JVtDAZPVK/pub?output=xlsx\");\n    if(!resp.ok) return;\n\n    let blog = await resp.arrayBuffer();\n    let workbook = XLSX.read(blog, { type: 'buffer' });\n    let data = {}; \n    for (const sheet in workbook.Sheets) {\n      if (workbook.Sheets.hasOwnProperty(sheet)) {\n        data[sheet] = XLSX.utils.sheet_to_json(workbook.Sheets[sheet]);\n      }\n    }\n\n\n    //publisher handler\n    const parsePublisher = _=> {\n      let { id, name_ref, region_ids, level_ids, ...props } = _;\n      props.region_idxes = region_ids.split(\",\").map(_=>data.regions.findIndex(r=>r.id==_));\n      props.level_values = level_ids.split(\",\").map(_=>data.levels.find(l=>l.id==_).value);\n      return props; \n    }\n\n    const publisherFilter = _ => _.region_ids && _.region_ids!=\"\";\n\n    //vocab_publishers\n    let vocab_publishers = data.vocab_publishers.filter(publisherFilter).map(parsePublisher);\n    let grammar_publishers = data.grammar_publishers.filter(publisherFilter).map(parsePublisher);\n    let listening_publishers = data.listening_publishers.filter(publisherFilter).map(parsePublisher); \n    let speaking_publishers = data.speaking_publishers.filter(publisherFilter).map(parsePublisher); \n\n    //regions\n    let regions = data.regions.map(_=>{\n      let { id, name_ref, ...props } = _;\n      return props;\n    });\n\n    //region\n    console.log(`{\n      \"region\": [\n        ${regions.map(_=>JSON.stringify(_)).join(',\\n')}\n      ]\n    }`);\n    //vocab_publishers\n    console.log(`{\n      \"vocab_publishers\": [\n        ${vocab_publishers.map(_=>JSON.stringify(_)).join(',\\n')}\n      ]\n    }`);\n    //grammar_publishers\n    console.log(`{\n      \"grammar_publishers\": [\n        ${grammar_publishers.map(_=>JSON.stringify(_)).join(',\\n')}\n      ]\n    }`);\n    //speaking_publishers\n    console.log(`{\n      \"speaking_publishers\": [\n        ${speaking_publishers.map(_=>JSON.stringify(_)).join(',\\n')}\n      ]\n    }`);\n    //listening_publishers\n    console.log(`{\n      \"listening_publishers\": [\n        ${listening_publishers.map(_=>JSON.stringify(_)).join(',\\n')}\n      ]\n    }`);\n\n    // console.log(JSON.stringify(results, null, 1));    \n\n  }\n\n  render() {\n    return (\n      <section >\n        <div style={{ border: '1px solid black', maxWidth: '100%', color: 'black', margin: 20 }} onClick={this.convert} >\n          <center><h1>Get CN RegionBase</h1></center>\n        </div>\n      </section>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport SentenceSRT2WordSRT from  './Components/SentenceSRT2WordSRT'\nimport SentenceCSV2DataFiles from  './Components/SentenceCSV2DataFiles'\nimport I18nJSON2CSV from './Components/I18nJSON2CSV'\nimport ConsolidatedCSV2I18nJSONFiles from './Components/ConsolidatedCSV2I18nJSONFiles'\nimport GetCNRegionBase from './Components/GetCNRegionBase'\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <SentenceSRT2WordSRT />\n        <SentenceCSV2DataFiles />\n        <I18nJSON2CSV />\n        <ConsolidatedCSV2I18nJSONFiles />\n        <GetCNRegionBase />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}