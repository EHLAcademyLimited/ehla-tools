{"version":3,"sources":["Components/SentenceSRT2WordSRT.js","Components/SentenceCSV2DataFiles.js","Components/I18nJSON2CSV.js","Components/ConsolidatedCSV2I18nJSONFiles.js","Components/GetCNRegionBase.js","PromiseUtil.js","Components/GetCacheBundles.js","App.js","serviceWorker.js","index.js"],"names":["SentenceSRT2WordSRT","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","parseWord","word","replace","handleDroppedFile","file","value","result","setState","readFile","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","Promise","resolve","reader","FileReader","onloadend","readAsText","abrupt","sent","stop","_x","apply","arguments","sentence2wordSRT","parsedSRT","start","text","split","map","filter","_","i","end","getFileName","outFilePathComponent","path","pop","join","convert","_ref2","_callee2","_ref3","content","parsed","wordsSRT","outputData","blob","fn","specialWords","_context2","parseSRT","concat","toConsumableArray","stringifySRT","Blob","type","saveAs","forEach","wordCount","length","_x2","onDrop","_ref4","_callee3","acceptedFiles","_context3","_x3","state","react_default","createElement","es","_ref5","getRootProps","getInputProps","assign","style","border","maxWidth","color","margin","Component","SentenceCSV2DataFiles","files","zip","data","sentenceTimeRanges","curIndex","curSentence","invalidRecords","outboundRecords","tunedRecords","turned","csv","JSZip","Csv","fromString","start_ms","end_ms","en","parseInt","srt","console","log","JSON","stringify","objectSpread","indexOf","nextSentence","push","_curSentence","returnSrt","from","to","substring","generateAsync","find","f","endsWith","alert","I18nJSON2CSV","parse","keys","RegExp","ConsolidatedCSV2I18nJSONFiles","_data$","fields","id","objectWithoutProperties","lang","i18nJSON","GetCNRegionBase","resp","blog","workbook","sheet","parsePublisher","publisherFilter","vocab_publishers","grammar_publishers","listening_publishers","speaking_publishers","regions","fetch","ok","arrayBuffer","XLSX","Sheets","hasOwnProperty","sheet_to_json","name_ref","region_ids","level_ids","region_idxes","findIndex","r","level_values","levels","l","onClick","PromiseAllWithProgress","proms","progress_cb","d","onCompleted","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","then","err","return","all","uuidv1","require","getURLExtention","lastIndexOf","substr","downloadAssetsBundle","resId","forbiddenURLs","promises","p","cacheMap","_p$i","filename","_blob","url","assetsRes","returnObj","getS3Link","status","t0","_x4","progress","extention","_callee4","_context4","isActive","App","className","SentenceSRT2WordSRT_SentenceSRT2WordSRT","SentenceCSV2DataFiles_SentenceCSV2DataFiles","I18nJSON2CSV_I18nJSON2CSV","ConsolidatedCSV2I18nJSONFiles_ConsolidatedCSV2I18nJSONFiles","GetCNRegionBase_GetCNRegionBase","GetCacheBundles_GetCNRegionBase","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9d20872a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Dropzone from 'react-dropzone'\nimport { parse as parseSRT, stringify as stringifySRT } from 'subtitle';\nimport { saveAs } from 'file-saver';\n\nexport default class SentenceSRT2WordSRT extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  parseWord = (word) => {\n    //remove leading and trailing character space,.!\n    word = word.replace(/(^['\":,.!?\\s]+)|(['\":,.!?\\s]+$)/g, '');\n    return word;\n  }\n\n  handleDroppedFile = (file) => {\n    const value = file.result;\n    this.setState({ value });\n  }\n  \n\n  readFile = async (file) => {\n    return await new Promise((resolve) => {\n      let reader = new FileReader();\n      reader.onloadend = () => resolve(reader.result);\n      reader.readAsText(file);\n    });\n  }\n\n\n  sentence2wordSRT = (parsedSRT) => {\n    let { start, text } = parsedSRT;\n    let words = text.split(\" \").map(this.parseWord).filter(_=>_!==\"\");\n    return words.map((text,i)=>({ start: i===0?start:0, end:i===0?start:0, text }));\n  }\n\n\n  getFileName = (file) => {\n    let outFilePathComponent = file.path.split('.');\n    outFilePathComponent.pop();\n    return outFilePathComponent.join(\".\");\n  }\n\n\n  \n\n  convert = async (file) => {\n    let content = await this.readFile(file);\n    let parsed = parseSRT(content);\n\n    //output words SRT\n    let wordsSRT = [].concat(...parsed.map(this.sentence2wordSRT));\n    let outputData = stringifySRT(wordsSRT);\n    let blob = new Blob([outputData], {type: \"text/plain;charset=utf-8\"});\n \n    let fn = this.getFileName(file);\n    saveAs(blob, `${fn}_word.srt`);\n\n\n    const specialWords = [\n      'e.g.', 'a.m.', 'p.m.'\n    ];\n    //output sentence CSV\n    outputData = \"\\uFEFF\";\n    outputData += \"start_ms,end_ms,id,word_count,thumbnail,en,hk,cn,tw,jp,kr\\n\";\n    outputData += parsed.map(_=>{\n      let text = _.text;\n      specialWords.forEach(_=>text=text.replace(_, 'word'));\n      //replace\n      text = text.replace(/-/g,' ');\n      text = text.replace(/,/g,' ');\n      text = text.replace(/\\./g,' ');\n      text = text.replace(/!/g,' ');\n      text = text.replace(/;/g,' ');\n      const wordCount = text.split(' ').filter(_=>_!=='').length;\n      return `${_.start},${_.end},,${wordCount},,\"${_.text}\",,,,,`;\n    }).join(\"\\n\");\n    blob = new Blob([outputData], {type: \"text/plain;charset=utf-8\"});\n    saveAs(blob, `${fn}.csv`);\n    \n  }\n\n  onDrop = async (acceptedFiles) => {\n    acceptedFiles.forEach(this.convert);\n  }\n\n  render() {\n    return (\n      <Dropzone onDrop={this.onDrop}>\n        {({getRootProps, getInputProps}) => (\n          <section >\n            <div {...getRootProps()} style={{ border: '1px solid black', maxWidth: '100%', color: 'black', margin: 20 }}>\n              <input {...getInputProps()} />\n              <center><h1>1. Sentences SRT -> Words SRT + Sentences CSV </h1></center>\n            </div>\n          </section>\n        )}\n      </Dropzone>\n    );\n  }\n}","import React, { Component } from 'react';\nimport Dropzone from 'react-dropzone'\nimport { saveAs } from 'file-saver';\nimport Csv from \"csvtojson\";\nimport { parse as parseSRT, stringify as stringifySRT } from 'subtitle';\nimport JSZip from \"jszip\";\n\nexport default class SentenceCSV2DataFiles extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  parseWord = (word) => {\n    //remove leading and trailing character space,.!\n    word = word.replace(/(^['\":,.!?\\s]+)|(['\":,.!?\\s]+$)/g, '');\n    return word;\n  }\n\n\n  handleDroppedFile = (file) => {\n    const value = file.result;\n    this.setState({ value });\n  }\n  \n\n  readFile = async (file) => {\n    return await new Promise((resolve) => {\n      let reader = new FileReader();\n      reader.onloadend = () => resolve(reader.result);\n      reader.readAsText(file);\n    });\n  }\n\n\n  sentence2wordSRT = (parsedSRT) => {\n    let { start, text } = parsedSRT;\n    let words = text.split(\" \").map(this.parseWord).filter(_=>_!==\"\");\n    return words.map((text,i)=>({ start: i===0?start:0, end:i===0?start:0, text }));\n  }\n\n\n  convert = async (files) => {\n\n    //CSV => data files\n    let content = await this.readFile(files.csv);\n    content = content.replace(\"\\uFEFF\", \"\");\n    \n    let zip = new JSZip();\n    let data = await Csv().fromString(content);\n    //time file\n    zip.file(\"time\", data.map(_=>`${_.start_ms} ${_.end_ms}`).join(\"\\n\"));\n    //other field\n    ['id', 'thumbnail', 'en', 'hk', 'cn', 'tw', 'jp', 'kr'].forEach(fn=>{\n      zip.file(`${fn}`, data.map(_=>_[fn]).join(\"\\n\"));\n    })\n\n\n    //tuning of words srt files \n    let sentenceTimeRanges = data.map(_=>({ text:_.en, start:parseInt(_.start_ms), end:parseInt(_.end_ms)}));\n    content = await this.readFile(files.srt);\n    let parsed = parseSRT(content);\n\n    console.log(`sentenceTimeRanges:${JSON.stringify(sentenceTimeRanges)}`);\n    console.log(`parsed[0]:${JSON.stringify(parsed[0])}`);\n    \n\n    let curIndex = 0, curSentence = {...sentenceTimeRanges[0]};\n    let invalidRecords = [], outboundRecords = [], tunedRecords = [];\n    let turned = parsed.map(_=>{\n      //check time range\n      while(curSentence.text.indexOf(_.text) === -1){\n        //check if moving to next sentence?\n        let nextSentence = {...sentenceTimeRanges[curIndex+1]}\n        if(nextSentence && nextSentence.text.indexOf(_.text) !== -1){\n          curIndex = curIndex + 1;\n          curSentence = nextSentence;\n        }else{\n          invalidRecords.push(_);\n          return null;\n        }\n      }\n\n      let { text, start, end } = curSentence;\n\n      let returnSrt = null;\n      if(_.end < start || _.start > end) outboundRecords.push(_);\n      else if(_.start >= start && _.end <= end) returnSrt = _;\n      else if(_.start < start) returnSrt = { ..._, start };\n      else if(_.end > end) returnSrt = { ..._, end };\n\n      if(returnSrt){\n        if(returnSrt !== _) tunedRecords.push({ from:_, to: returnSrt });\n        curSentence.text = text.substring(text.indexOf(_.text) + _.text.length);\n      }\n      return returnSrt;\n    }).filter(_=>_!=null);\n\n\n\n\n    //output words SRT\n    // let wordsSRT = [].concat(...parsed.map(this.sentence2wordSRT));\n    let outputData = stringifySRT(turned);\n    zip.file('word_tuned.srt', outputData);\n\n    zip.file('word_srt_tuned_report.txt', `invalid records:\\n${JSON.stringify(invalidRecords, null, 2)}\\noutbound records:\\n${JSON.stringify(outboundRecords, null, 2)}\\ntuned records:\\n${JSON.stringify(tunedRecords, null, 2)}`)\n\n    let blob = await zip.generateAsync({type:\"blob\"});\n    let outFilePathComponent = files.csv.path.split('.');\n    outFilePathComponent.pop();\n    saveAs(blob, `${outFilePathComponent.join(\".\")}.zip`);\n  }\n\n  onDrop = async (acceptedFiles) => {\n    let files = {\n      csv: acceptedFiles.find(f=>f.path.endsWith('.csv')),\n      srt: acceptedFiles.find(f=>f.path.endsWith('.srt'))\n    }\n    if(!files.csv || !files.srt) alert('please drop sentence csv and word srt files to me')\n    this.convert(files);\n  }\n\n  render() {\n    return (\n      <Dropzone onDrop={this.onDrop}>\n        {({getRootProps, getInputProps}) => (\n          <section >\n            <div {...getRootProps()} style={{ border: '1px solid black', maxWidth: '100%', color: 'black', margin: 20 }}>\n              <input {...getInputProps()} />\n              <center><h1>2. Words SRT + Sentence CSV -> Tuned Words SRT + Data Zip</h1></center>\n            </div>\n          </section>\n        )}\n      </Dropzone>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Dropzone from 'react-dropzone'\nimport { saveAs } from 'file-saver';\n\nexport default class I18nJSON2CSV extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  parseWord = (word) => {\n    //remove leading and trailing character space,.!\n    word = word.replace(/(^['\":,.!?\\s]+)|(['\":,.!?\\s]+$)/g, '');\n    return word;\n  }\n\n  handleDroppedFile = (file) => {\n    const value = file.result;\n    this.setState({ value });\n  }\n  \n\n  readFile = async (file) => {\n    return await new Promise((resolve) => {\n      let reader = new FileReader();\n      reader.onloadend = () => resolve(reader.result);\n      reader.readAsText(file);\n    });\n  }\n\n\n  sentence2wordSRT = (parsedSRT) => {\n    let { start, text } = parsedSRT;\n    let words = text.split(\" \").map(this.parseWord).filter(_=>_!==\"\");\n    return words.map((text,i)=>({ start: i===0?start:0, end:i===0?start:0, text }));\n  }\n\n\n  getFileName = (file) => {\n    let outFilePathComponent = file.path.split('.');\n    outFilePathComponent.pop();\n    return outFilePathComponent.join(\".\");\n  }\n\n  convert = async (file) => {\n    let content = await this.readFile(file);\n    let parsed = JSON.parse(content);\n\n    //output sentence CSV\n    let outputData = \"\\uFEFF\";\n    outputData += \"id,en,translate\\n\";\n    outputData += Object.keys(parsed).map(_=>`${_},\"${parsed[_].replace(new RegExp('\\n','g'),'\\r')}\",`).join(\"\\n\");\n    let blob = new Blob([outputData], {type: \"text/plain;charset=utf-8\"});\n\n    let fn = this.getFileName(file);\n    saveAs(blob, `${fn}.csv`);\n  }\n\n  onDrop = async (acceptedFiles) => {\n    acceptedFiles.forEach(this.convert);\n  }\n\n  render() {\n    return (\n      <Dropzone onDrop={this.onDrop}>\n        {({getRootProps, getInputProps}) => (\n          <section >\n            <div {...getRootProps()} style={{ border: '1px solid black', maxWidth: '100%', color: 'black', margin: 20 }}>\n              <input {...getInputProps()} />\n              <center><h1>I18n JSON -> CSV</h1></center>\n            </div>\n          </section>\n        )}\n      </Dropzone>\n    );\n  }\n}","import React, { Component } from 'react';\nimport Dropzone from 'react-dropzone'\nimport { saveAs } from 'file-saver';\nimport Csv from \"csvtojson\";\nimport JSZip from \"jszip\";\n\nexport default class ConsolidatedCSV2I18nJSONFiles extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  parseWord = (word) => {\n    //remove leading and trailing character space,.!\n    word = word.replace(/(^['\":,.!?\\s]+)|(['\":,.!?\\s]+$)/g, '');\n    return word;\n  }\n\n\n  handleDroppedFile = (file) => {\n    const value = file.result;\n    this.setState({ value });\n  }\n  \n\n  readFile = async (file) => {\n    return await new Promise((resolve) => {\n      let reader = new FileReader();\n      reader.onloadend = () => resolve(reader.result);\n      reader.readAsText(file);\n    });\n  }\n\n\n  sentence2wordSRT = (parsedSRT) => {\n    let { start, text } = parsedSRT;\n    let words = text.split(\" \").map(this.parseWord).filter(_=>_!==\"\");\n    return words.map((text,i)=>({ start: i===0?start:0, end:i===0?start:0, text }));\n  }\n\n\n  getFileName = (file) => {\n    let outFilePathComponent = file.path.split('.');\n    outFilePathComponent.pop();\n    return outFilePathComponent.join(\".\");\n  }\n\n  convert = async (file) => {\n    let content = await this.readFile(file);\n    content = content.replace(\"\\uFEFF\", \"\");\n    let data = await Csv().fromString(content);\n \n\n    let zip = new JSZip();\n    \n    //get fields details\n    let { id, ...fields } = data[0];\n    let langs = Object.keys(fields);\n    \n    langs.forEach(lang=>{\n      let i18nJSON = {}\n      data.forEach(_=>i18nJSON[_.id] = _[lang]);\n      delete i18nJSON[\"\"];  //remove empty key\n      zip.file(`${lang}`, JSON.stringify(i18nJSON));\n    });\n\n    let blob = await zip.generateAsync({type:\"blob\"});\n    saveAs(blob, `${this.getFileName(file)}.zip`);\n\n  }\n\n  onDrop = async (acceptedFiles) => {\n    acceptedFiles.forEach(this.convert);\n  }\n\n  render() {\n    return (\n      <Dropzone onDrop={this.onDrop}>\n        {({getRootProps, getInputProps}) => (\n          <section >\n            <div {...getRootProps()} style={{ border: '1px solid black', maxWidth: '100%', color: 'black', margin: 20 }}>\n              <input {...getInputProps()} />\n              <center><h1>Cosolidated I18n CSV -> I18n JSON Data Files</h1></center>\n            </div>\n          </section>\n        )}\n      </Dropzone>\n    );\n  }\n}","import React, { Component } from 'react';\nimport * as XLSX from 'xlsx';\n\nexport default class GetCNRegionBase extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  parseWord = (word) => {\n    //remove leading and trailing character space,.!\n    word = word.replace(/(^['\":,.!?\\s]+)|(['\":,.!?\\s]+$)/g, '');\n    return word;\n  }\n\n  handleDroppedFile = (file) => {\n    const value = file.result;\n    this.setState({ value });\n  }\n  \n\n  readFile = async (file) => {\n    return await new Promise((resolve) => {\n      let reader = new FileReader();\n      reader.onloadend = () => resolve(reader.result);\n      reader.readAsText(file);\n    });\n  }\n\n\n  sentence2wordSRT = (parsedSRT) => {\n    let { start, text } = parsedSRT;\n    let words = text.split(\" \").map(this.parseWord).filter(_=>_!==\"\");\n    return words.map((text,i)=>({ start: i===0?start:0, end:i===0?start:0, text }));\n  }\n\n\n  getFileName = (file) => {\n    let outFilePathComponent = file.path.split('.');\n    outFilePathComponent.pop();\n    return outFilePathComponent.join(\".\");\n  }\n\n  convert = async () => {\n    let resp = await fetch(\"https://docs.google.com/spreadsheets/d/e/2PACX-1vSd9wPw4mD1f-Uvyk7DxRP892wFohetQzKABnLJq_T4bDfYbowuPP_hR98vu47eWdwUKI5JVtDAZPVK/pub?output=xlsx\");\n    if(!resp.ok) return;\n\n    let blog = await resp.arrayBuffer();\n    let workbook = XLSX.read(blog, { type: 'buffer' });\n    let data = {}; \n    for (const sheet in workbook.Sheets) {\n      if (workbook.Sheets.hasOwnProperty(sheet)) {\n        data[sheet] = XLSX.utils.sheet_to_json(workbook.Sheets[sheet]);\n      }\n    }\n\n    //publisher handler\n    const parsePublisher = _=> {\n      let { id, name_ref, region_ids, level_ids, ...props } = _;\n      props.region_idxes = region_ids.split(\",\").map(_=>data.regions.findIndex(r=>`${r.id}`===_));\n      props.level_values = level_ids.split(\",\").map(_=>data.levels.find(l=>`${l.id}`===_).value);\n      return props; \n    }\n\n    const publisherFilter = _ => _.region_ids && _.region_ids!==\"\";\n\n    //vocab_publishers\n    let vocab_publishers = data.vocab_publishers.filter(publisherFilter).map(parsePublisher);\n    let grammar_publishers = data.grammar_publishers.filter(publisherFilter).map(parsePublisher);\n    let listening_publishers = data.listening_publishers.filter(publisherFilter).map(parsePublisher); \n    let speaking_publishers = data.speaking_publishers.filter(publisherFilter).map(parsePublisher); \n\n    //regions\n    let regions = data.regions.map(_=>{\n      let { id, name_ref, ...props } = _;\n      return props;\n    });\n\n    //region\n    console.log(`{\n      \"region\": [\n        ${regions.map(_=>JSON.stringify(_)).join(',\\n')}\n      ]\n    }`);\n    //vocab_publishers\n    console.log(`{\n      \"vocab_publishers\": [\n        ${vocab_publishers.map(_=>JSON.stringify(_)).join(',\\n')}\n      ]\n    }`);\n    //grammar_publishers\n    console.log(`{\n      \"grammar_publishers\": [\n        ${grammar_publishers.map(_=>JSON.stringify(_)).join(',\\n')}\n      ]\n    }`);\n    //speaking_publishers\n    console.log(`{\n      \"speaking_publishers\": [\n        ${speaking_publishers.map(_=>JSON.stringify(_)).join(',\\n')}\n      ]\n    }`);\n    //listening_publishers\n    console.log(`{\n      \"listening_publishers\": [\n        ${listening_publishers.map(_=>JSON.stringify(_)).join(',\\n')}\n      ]\n    }`);\n\n    // console.log(JSON.stringify(results, null, 1));    \n\n  }\n\n  render() {\n    return (\n      <section >\n        <div style={{ border: '1px solid black', maxWidth: '100%', color: 'black', margin: 20 }} onClick={this.convert} >\n          <center><h1>Get CN RegionBase</h1></center>\n        </div>\n      </section>\n    );\n  }\n}\n","export const PromiseAllWithProgress = (proms, progress_cb) => {\n  let d = 0;\n  progress_cb(0);\n  const onCompleted = () => {\n    d ++;\n    progress_cb(d/proms.length);\n  }\n  for (const p of proms) {\n    p.then(onCompleted, onCompleted);\n  }\n  return Promise.all(proms);\n}","import React, { Component } from 'react';\nimport Csv from \"csvtojson\";\nimport { saveAs } from 'file-saver';\nimport { PromiseAllWithProgress }  from '../PromiseUtil';\nimport JSZip from \"jszip\";\nconst uuidv1 = require('uuid/v1');\n\n\nexport default class GetCNRegionBase extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  parseWord = (word) => {\n    //remove leading and trailing character space,.!\n    word = word.replace(/(^['\":,.!?\\s]+)|(['\":,.!?\\s]+$)/g, '');\n    return word;\n  }\n\n  handleDroppedFile = (file) => {\n    const value = file.result;\n    this.setState({ value });\n  }\n  \n\n  readFile = async (file) => {\n    return await new Promise((resolve) => {\n      let reader = new FileReader();\n      reader.onloadend = () => resolve(reader.result);\n      reader.readAsText(file);\n    });\n  }\n\n  getFileName = (file) => {\n    let outFilePathComponent = file.path.split('.');\n    outFilePathComponent.pop();\n    return outFilePathComponent.join(\".\");\n  }\n\n  getURLExtention = _ => {\n    if (_.lastIndexOf('#') > 0) _ = _.substr(0, _.lastIndexOf('#'));\n    if (_.lastIndexOf('?') > 0) _ = _.substr(0, _.lastIndexOf('?'));\n    return _.substr(_.lastIndexOf('.') + 1);\n  }\n\n  downloadAssetsBundle = async (data, resId) => {\n    console.log(`downloading cache files for res Id = ${resId}`);\n\n    this.setState({ assetsRes: resId });\n\n    let zip = new JSZip();\n\n    let forbiddenURLs = {};\n\n    let promises = data.filter(_=>{\n      if(!_) { console.log(`invalid record:`, _); return false; }\n      if(!_['id']) { console.log(`invalid record:`, _); return false; }\n      if(_['id'] === 'cache_bundle') { console.log(`cache_bundle record, ignore`); return false; }\n      return true;\n    }).map(async _=>{\n      let id = _['id'];\n      let filename = uuidv1();\n      let url = this.getS3Link(_[resId]);\n      let returnObj = {\n        id, filename, url\n      };\n  \n\n      try {\n        let resp = await fetch(url);\n        if(resp.status===200) returnObj.blob = await resp.blob();\n      } catch (e) {\n        // console.log(`download fail for obj:`, returnObj , `e:`, e);\n      }\n\n      return returnObj;\n    });\n\n\n\n    let p = await PromiseAllWithProgress(promises, _=>this.setState({ progress: _ }));\n\n    let cacheMap = {};\n    //generate zip file and download\n    for (let i = 0; i < p.length; i++) {\n      const { id, filename, blob, url } = p[i];\n      if(blob){\n        cacheMap[id] = { filename, extention: this.getURLExtention(url) };\n        await zip.file(filename, blob);\n      }else{\n        forbiddenURLs[id] = url;\n      }\n    }\n    await zip.file('cache', new Blob([JSON.stringify(cacheMap, null, 1)], {type: \"text/plain;charset=utf-8\"}));\n\n    console.log(`forbiddenURLs:\\n${JSON.stringify(forbiddenURLs, null, 2)}`);\n\n    let blob = await zip.generateAsync({ type:\"blob\" });\n    saveAs(blob, `${resId}.zip`);\n  }\n\n\n  getS3Link = (path) => `https://s3-ap-southeast-1.amazonaws.com/ehla-media-bucket/apps-dev/1.1.0/assets/${path}`;\n\n  convert = async () => {\n    this.setState({ isActive: true, assetsRes: null, progress: 0 });\n\n    let resp = await fetch(\"https://docs.google.com/spreadsheets/d/e/2PACX-1vTdYNQ7IPRj4i7z41JFLK8hHOh09Ds-3-Jz18bSW6q4EQdomUrDLW2nt27AIsjZonOYXhRQFOnFLKjS/pub?gid=0&single=true&output=csv\");\n    if(!resp.ok) return;\n\n    let content = await resp.text();\n    let data = await Csv().fromString(content.replace(\"\\uFEFF\", \"\"));\n\n\n    let assetsRes = Object.keys(data[0]).filter(_=>_!==\"id\");\n    console.log(`existing resolution:`, assetsRes);\n\n\n\n\n    for(let i = 0; i < assetsRes.length; i++) {\n      await this.downloadAssetsBundle(data, assetsRes[i]);\n    }\n\n    // await this.downloadAssetsBundle(data, '10');\n\n    // let zip = new JSZip();\n    // let data = await Csv().fromString(content);\n    // //time file\n    // zip.file(\"time\", data.map(_=>`${_.start_ms} ${_.end_ms}`).join(\"\\n\"));\n    // //other field\n    // ['id', 'en', 'hk', 'cn', 'tw', 'jp', 'kr'].forEach(fn=>{\n    //   zip.file(`${fn}`, data.map(_=>_[fn]).join(\"\\n\"));\n    // })\n\n    //PromiseAllWithProgress()\n\n\n    // let links = data.map(_=>this.getS3Link(_['20']));\n    // console.log(JSON.stringify(links));\n\n    this.setState({ isActive: false });\n\n    // let i18nJSON = {}\n    // data.forEach(_=>i18nJSON[_.id] = _.translate);\n    // let blob = new Blob([JSON.stringify(i18nJSON, null, 1)], {type: \"text/plain;charset=utf-8\"});\n    // let fn = this.getFileName(file);\n    // saveAs(blob, `${fn}.json`);\n\n  }\n\n  render() {\n    return (\n      <section >\n        <div style={{ border: '1px solid black', maxWidth: '100%', color: 'black', margin: 20 }} onClick={this.convert} >\n          <center><h1>{!this.state.isActive?`Get Cached Bundle Zip`:`downloading scale:${this.state.assetsRes} progress:${this.state.progress}`}</h1></center>\n        </div>\n      </section>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport SentenceSRT2WordSRT from  './Components/SentenceSRT2WordSRT'\nimport SentenceCSV2DataFiles from  './Components/SentenceCSV2DataFiles'\nimport I18nJSON2CSV from './Components/I18nJSON2CSV'\nimport ConsolidatedCSV2I18nJSONFiles from './Components/ConsolidatedCSV2I18nJSONFiles'\nimport GetCNRegionBase from './Components/GetCNRegionBase'\nimport GetCacheBundles from './Components/GetCacheBundles'\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <SentenceSRT2WordSRT />\n        <SentenceCSV2DataFiles />\n        <I18nJSON2CSV />\n        <ConsolidatedCSV2I18nJSONFiles />\n        <GetCNRegionBase />\n        <GetCacheBundles />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}